---
description: AutoMem persistent memory - recall context at start, store decisions during work, summarize at end
alwaysApply: true
---

# AutoMem Memory Integration

Use memory tools proactively to maintain persistent context across sessions for vgp-edd-stats.

## About the Memory System

**AutoMem MCP Server**: You have access to the AutoMem memory system via MCP (Model Context Protocol). The memory server is already installed and active in your environment.

**How it works**:
- Tools are accessed via MCP with the `mcp_memory_*` prefix (e.g., `mcp_memory_store_memory`)
- Data is stored in **FalkorDB** (graph database for relationships) and **Qdrant** (vector database for semantic search)
- Memories persist across all conversations and sessions

**Your role**: Use these MCP tools to store important context and recall it when needed. The system handles storage, indexing, and retrieval automatically.

## 3-Phase Memory Pattern

### 1. CONVERSATION START
Recall relevant context for strategic and contextual questions:

**ALWAYS recall for:**
- Project context questions (documentation, tooling, deployment)
- Architecture discussions or decisions
- User preferences and choices
- Feature planning or strategy
- Any question about "why" something exists or how it should be done
- Debugging issues (search for similar past problems)
- Performance optimization discussions
- Integration or API work (check past implementations)
- Refactoring (understand why current structure exists)

**ADAPTIVE RECALL** (based on context clues):
- If files are open: Recall memories tagged with those components
- If error messages present: Search for similar error patterns
- If multiple related files: Recall architectural decisions
- If PR/commit context: Recall related feature implementations

**Skip memory ONLY for:**
- Pure syntax/language questions ("How does Array.map work?")
- Trivial edits (typos, formatting, simple renames)
- Direct factual queries about current code ("What's in this function?")
- File content requests that can be answered by reading the file

**Natural integration:** If memories found, weave context into response naturally. Avoid robotic phrases like "I'm searching my memory" or "Let me recall..." Just use the information as if you've always known it.

### 2. DURING CONVERSATION
Store memories for important events:

**Decisions** (importance: 0.9, type: "Decision")
- Architecture choices, library selections, pattern decisions
- Example: `Chose Redis for caching due to performance needs and sub-millisecond latency requirements`

**Insights** (importance: 0.8, type: "Insight")
- Root cause discoveries, key learnings, problem resolutions
- Example: `UserAuth failing on null input. Root cause: missing validation. Added null checks before processing`

**Patterns** (importance: 0.7, type: "Pattern")
- Reusable patterns, best practices discovered
- Example: `Using early returns for validation. Reduces nesting, improves readability. Applied in all API routes`

**Preferences** (importance: 0.6-0.8, type: "Preference")
- Configuration choices, tool selections, style preferences
- Example: `Using Prettier with 2-space indents and single quotes. Enforced via pre-commit hooks`

**Context** (importance: 0.5-0.7, type: "Context")
- General information, new features, refactoring notes
- Example: `Added JWT authentication with refresh tokens. Supports both access and refresh token rotation`

**Storage format:**
```javascript
mcp_memory_store_memory({
  content: "Brief title. Context and details. Impact/outcome.",
  type: "Insight",
  confidence: 0.95,
  tags: ["vgp-edd-stats", "component", "2025-10"],
  importance: 0.8,
  metadata: {
    component: "auth",
    files_modified: ["src/auth/UserAuth.ts"],
    error_signature: "TypeError: Cannot read property 'id' of null",
    solution_pattern: "null-check-validation"
  }
})
```

### 3. CONVERSATION END
Summarize if multiple files modified, significant refactoring, new features, or important decisions:

```javascript
mcp_memory_store_memory({
  content: "Added authentication system with JWT. Supports login, logout, and token refresh. Impact: Users can now login securely.",
  type: "Context",
  tags: ["vgp-edd-stats", "auth", "2025-10"],
  importance: 0.9,
  metadata: {
    files_modified: ["src/auth/UserAuth.ts", "src/middleware/auth.ts"],
    feature: "authentication"
  }
})
```

## Memory Types

**Valid types:**
- **Decision** - Strategic or technical decisions (architecture, libraries, approaches)
- **Pattern** - Recurring approaches, best practices, code patterns
- **Preference** - User/team preferences (tools, config, style)
- **Style** - Code style or formatting preferences
- **Habit** - Regular behaviors or workflows
- **Insight** - Key learnings, realizations, problem resolutions
- **Context** - General contextual information (default if type omitted)

**Type selection guide:**
- Use explicit `type` when you're confident about the classification
- Omit `type` to let the system auto-classify (less accurate but acceptable)
- Include `confidence: 0.95` when providing explicit type (defaults to 0.9)

## Tagging Convention

ALWAYS include these tags:
1. `vgp-edd-stats` - Project identifier
2. `cursor` - Platform tag
3. `2025-10` - Current month (YYYY-MM format)
4. Component tag - Specific area (e.g., "auth", "api", "frontend")

## Importance Scoring

- **0.9-1.0**: Critical decisions, major features, breaking changes
- **0.7-0.9**: Important patterns, significant bugs, new integrations
- **0.5-0.7**: Helpful patterns, minor features, config changes
- **0.3-0.5**: Small fixes, temporary workarounds, notes

## Memory Associations

Link related memories for richer context:

```javascript
mcp_memory_associate_memories({
  memory1_id: "<first-memory-id>",
  memory2_id: "<second-memory-id>",
  type: "RELATES_TO",  // or LEADS_TO, EVOLVED_INTO, CONTRADICTS, etc.
  strength: 0.8
})
```

Association types: `RELATES_TO`, `LEADS_TO`, `OCCURRED_BEFORE`, `PREFERS_OVER`, `EXEMPLIFIES`, `CONTRADICTS`, `REINFORCES`, `INVALIDATED_BY`, `EVOLVED_INTO`, `DERIVED_FROM`, `PART_OF`

## Recall Strategies

**Start simple, expand as needed:**
```javascript
// 1. Basic recall (start here)
mcp_memory_recall_memory({
  query: "authentication patterns",
  tags: ["vgp-edd-stats"],
  limit: 5
})

// 2. Add time window if needed
mcp_memory_recall_memory({
  query: "API changes",
  tags: ["vgp-edd-stats"],
  time_query: "last 30 days"
})

// 3. For error patterns, be specific
mcp_memory_recall_memory({
  query: "TypeError authentication timeout login",
  tags: ["vgp-edd-stats", "bug-fix"],
  limit: 5
})

// 4. Use prefix matching for component namespaces
mcp_memory_recall_memory({
  tags: ["vgp-edd-stats", "auth/*"],
  tag_match: "prefix"
})

// 5. Parallel recall for comprehensive context
const [decisions, recent, patterns] = await Promise.all([
  mcp_memory_recall_memory({ tags: ["vgp-edd-stats", "decision"], limit: 3 }),
  mcp_memory_recall_memory({ tags: ["vgp-edd-stats"], time_query: "today", limit: 3 }),
  mcp_memory_recall_memory({ tags: ["vgp-edd-stats", "pattern"], limit: 3 })
]);
```

## Content Structure

Format: `Brief title. Context and details. Impact/outcome.`

**Good:**
- `Using PostgreSQL over MongoDB. Need ACID guarantees for transactions. Impact: Ensures data consistency.` (type: "Decision")
- `Login failing on special characters. Root: missing input sanitization. Added validator. Files: auth/login.ts` (type: "Insight")
- `Early returns for validation. Reduces nesting, improves readability. Applied in all API routes.` (type: "Pattern")

**Avoid:**
- Trivial changes: "Fixed typo", "Updated comment"
- Missing context: "Changed config" (what config? why?)
- Secrets: Never store API keys, passwords, tokens
- Type prefixes in content: Don't use `[DECISION]` or `[BUG-FIX]` - use the `type` field instead

## Tool Reference

**Store memory:**
```javascript
mcp_memory_store_memory({
  content: string,              // Required: Memory content (no [TYPE] prefix needed)
  type?: string,                // Optional: "Decision", "Pattern", "Insight", "Preference", "Style", "Habit", "Context"
  confidence?: number,          // Optional: 0.0-1.0 (default: 0.9 if type provided, auto-computed otherwise)
  tags?: string[],              // Optional: Tags for categorization
  importance?: number,          // Optional: 0.0-1.0 (default: 0.5)
  metadata?: object,            // Optional: Custom metadata
  timestamp?: string,           // Optional: ISO 8601 timestamp
  id?: string,                  // Optional: Custom memory ID
  t_valid?: string,             // Optional: When memory becomes valid
  t_invalid?: string            // Optional: When memory expires
})
```

**Recall memories:**
```javascript
mcp_memory_recall_memory({
  query?: string,
  tags?: string[],
  limit?: number,           // default: 3, max: 50
  time_query?: string,      // "today", "last week", "last 30 days"
  tag_mode?: "any"|"all",   // OR (default) vs AND for tags
  tag_match?: "exact"|"prefix"
})
```

**Update memory:**
```javascript
mcp_memory_update_memory({
  memory_id: string,
  content?: string,
  type?: string,
  confidence?: number,
  tags?: string[],
  importance?: number,
  metadata?: object
})
```

**Associate memories:**
```javascript
mcp_memory_associate_memories({
  memory1_id: string,
  memory2_id: string,
  type: "RELATES_TO" | "LEADS_TO" | ...,
  strength: number  // 0.0-1.0
})
```

## Error Handling

If memory operations fail:
- **Recall fails/empty**: Continue without historical context. Don't announce the failure.
- **Store fails**: Complete the task normally. Memory is enhancement, not requirement.
- **Service unavailable**: Focus on solving the immediate problem.

Memory enhances the experience but should never block progress.

## Best Practices

- **Default to recall**: For project-related questions, always check memory first
- **Natural integration**: Use recalled context seamlessly, don't announce memory operations
- **Tag consistently**: Project, platform, date, component, type on every store
- **Link related memories**: Use associations to build knowledge graphs
- **Avoid noise**: Don't store trivial changes (typos, formatting, comments)
- **Include context**: Future you needs to understand "why", not just "what"
- **Parallel recall**: Execute multiple queries simultaneously for faster loading
- **Start simple**: Begin with project name tag only, add more tags if needed

---

**Installed**: `npx @verygoodplugins/mcp-automem cursor`
**Project**: vgp-edd-stats
**Current Month**: 2025-10

Memory is your persistent brain across sessions. Use it strategically!